<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ygjt.gdn.ftisp.persistence.RefreshTokenDao">
     <resultMap id="BaseResultMap" type="com.ygjt.gdn.ftisp.model.RefreshTokenDo">
          <id column="id" jdbcType="INTEGER" property="id" />
          <result column="token_id" jdbcType="VARCHAR" property="tokenId" />
          <result column="created_by" jdbcType="INTEGER" property="createdBy" />
          <result column="created_dt" jdbcType="TIMESTAMP" property="createdDt" />
          <result column="last_update_by" jdbcType="INTEGER" property="lastUpdateBy" />
          <result column="last_update_dt" jdbcType="TIMESTAMP" property="lastUpdateDt" />
          <result column="sts" jdbcType="CHAR" property="sts" />
     </resultMap>
     <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.ygjt.gdn.ftisp.model.RefreshTokenWithBLOBs">
          <result column="token" jdbcType="LONGVARBINARY" property="token" />
          <result column="authentication" jdbcType="LONGVARBINARY" property="authentication" />
     </resultMap>
     <sql id="Query_Where_Clause">
          <where>
               <foreach collection="oredCriteria" item="criteria" separator="or">
                    <if test="criteria.valid">
                         <trim prefix="(" prefixOverrides="and" suffix=")">
                              <foreach collection="criteria.criteria" item="criterion">
                                   <choose>
                                        <when test="criterion.noValue">
                                             and ${criterion.condition}
                                        </when>
                                        <when test="criterion.singleValue">
                                             and ${criterion.condition} #{criterion.value}
                                        </when>
                                        <when test="criterion.betweenValue">
                                             and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                        </when>
                                        <when test="criterion.listValue">
                                             and ${criterion.condition}
                                             <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                                  #{listItem}
                                             </foreach>
                                        </when>
                                   </choose>
                              </foreach>
                         </trim>
                    </if>
               </foreach>
          </where>
     </sql>
     <sql id="Update_By_Query_Where_Clause">
          <where>
               <foreach collection="example.oredCriteria" item="criteria" separator="or">
                    <if test="criteria.valid">
                         <trim prefix="(" prefixOverrides="and" suffix=")">
                              <foreach collection="criteria.criteria" item="criterion">
                                   <choose>
                                        <when test="criterion.noValue">
                                             and ${criterion.condition}
                                        </when>
                                        <when test="criterion.singleValue">
                                             and ${criterion.condition} #{criterion.value}
                                        </when>
                                        <when test="criterion.betweenValue">
                                             and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                        </when>
                                        <when test="criterion.listValue">
                                             and ${criterion.condition}
                                             <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                                  #{listItem}
                                             </foreach>
                                        </when>
                                   </choose>
                              </foreach>
                         </trim>
                    </if>
               </foreach>
          </where>
     </sql>
     <sql id="Base_Column_List">
          id, token_id, created_by, created_dt, last_update_by, last_update_dt, sts
     </sql>
     <sql id="Blob_Column_List">
          token, authentication
     </sql>
     <select id="selectByQueryWithBLOBs" parameterType="com.ygjt.gdn.ftisp.model.Query.RefreshTokenQuery" resultMap="ResultMapWithBLOBs">
          select
          <if test="distinct">
               distinct
          </if>
          <include refid="Base_Column_List" />
          ,
          <include refid="Blob_Column_List" />
          from auth_refresh_token
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
          <if test="orderByClause != null">
               order by ${orderByClause}
          </if>
     </select>
     <select id="selectByQuery" parameterType="com.ygjt.gdn.ftisp.model.Query.RefreshTokenQuery" resultMap="BaseResultMap">
          select
          <if test="distinct">
               distinct
          </if>
          <include refid="Base_Column_List" />
          from auth_refresh_token
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
          <if test="orderByClause != null">
               order by ${orderByClause}
          </if>
     </select>
     <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
          select 
          <include refid="Base_Column_List" />
          ,
          <include refid="Blob_Column_List" />
          from auth_refresh_token
          where id = #{id,jdbcType=INTEGER}
     </select>
     <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
          delete from auth_refresh_token
          where id = #{id,jdbcType=INTEGER}
     </delete>
     <delete id="deleteByQuery" parameterType="com.ygjt.gdn.ftisp.model.Query.RefreshTokenQuery">
          delete from auth_refresh_token
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
     </delete>
     <insert id="insert" parameterType="com.ygjt.gdn.ftisp.model.RefreshTokenWithBLOBs">
          <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
               SELECT LAST_INSERT_ID()
          </selectKey>
          insert into auth_refresh_token (token_id, created_by, created_dt, 
               last_update_by, last_update_dt, sts, 
               token, authentication)
          values (#{tokenId,jdbcType=VARCHAR}, #{createdBy,jdbcType=INTEGER}, #{createdDt,jdbcType=TIMESTAMP}, 
               #{lastUpdateBy,jdbcType=INTEGER}, #{lastUpdateDt,jdbcType=TIMESTAMP}, #{sts,jdbcType=CHAR}, 
               #{token,jdbcType=LONGVARBINARY}, #{authentication,jdbcType=LONGVARBINARY})
     </insert>
     <insert id="insertSelective" parameterType="com.ygjt.gdn.ftisp.model.RefreshTokenWithBLOBs">
          <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
               SELECT LAST_INSERT_ID()
          </selectKey>
          insert into auth_refresh_token
          <trim prefix="(" suffix=")" suffixOverrides=",">
               <if test="tokenId != null">
                    token_id,
               </if>
               <if test="createdBy != null">
                    created_by,
               </if>
               <if test="createdDt != null">
                    created_dt,
               </if>
               <if test="lastUpdateBy != null">
                    last_update_by,
               </if>
               <if test="lastUpdateDt != null">
                    last_update_dt,
               </if>
               <if test="sts != null">
                    sts,
               </if>
               <if test="token != null">
                    token,
               </if>
               <if test="authentication != null">
                    authentication,
               </if>
          </trim>
          <trim prefix="values (" suffix=")" suffixOverrides=",">
               <if test="tokenId != null">
                    #{tokenId,jdbcType=VARCHAR},
               </if>
               <if test="createdBy != null">
                    #{createdBy,jdbcType=INTEGER},
               </if>
               <if test="createdDt != null">
                    #{createdDt,jdbcType=TIMESTAMP},
               </if>
               <if test="lastUpdateBy != null">
                    #{lastUpdateBy,jdbcType=INTEGER},
               </if>
               <if test="lastUpdateDt != null">
                    #{lastUpdateDt,jdbcType=TIMESTAMP},
               </if>
               <if test="sts != null">
                    #{sts,jdbcType=CHAR},
               </if>
               <if test="token != null">
                    #{token,jdbcType=LONGVARBINARY},
               </if>
               <if test="authentication != null">
                    #{authentication,jdbcType=LONGVARBINARY},
               </if>
          </trim>
     </insert>
     <select id="countByQuery" parameterType="com.ygjt.gdn.ftisp.model.Query.RefreshTokenQuery" resultType="java.lang.Long">
          select count(*) from auth_refresh_token
          <if test="_parameter != null">
               <include refid="Query_Where_Clause" />
          </if>
     </select>
     <update id="updateByQuerySelective" parameterType="map">
          update auth_refresh_token
          <set>
               <if test="record.id != null">
                    id = #{record.id,jdbcType=INTEGER},
               </if>
               <if test="record.tokenId != null">
                    token_id = #{record.tokenId,jdbcType=VARCHAR},
               </if>
               <if test="record.createdBy != null">
                    created_by = #{record.createdBy,jdbcType=INTEGER},
               </if>
               <if test="record.createdDt != null">
                    created_dt = #{record.createdDt,jdbcType=TIMESTAMP},
               </if>
               <if test="record.lastUpdateBy != null">
                    last_update_by = #{record.lastUpdateBy,jdbcType=INTEGER},
               </if>
               <if test="record.lastUpdateDt != null">
                    last_update_dt = #{record.lastUpdateDt,jdbcType=TIMESTAMP},
               </if>
               <if test="record.sts != null">
                    sts = #{record.sts,jdbcType=CHAR},
               </if>
               <if test="record.token != null">
                    token = #{record.token,jdbcType=LONGVARBINARY},
               </if>
               <if test="record.authentication != null">
                    authentication = #{record.authentication,jdbcType=LONGVARBINARY},
               </if>
          </set>
          <if test="_parameter != null">
               <include refid="Update_By_Query_Where_Clause" />
          </if>
     </update>
     <update id="updateByQueryWithBLOBs" parameterType="map">
          update auth_refresh_token
          set id = #{record.id,jdbcType=INTEGER},
               token_id = #{record.tokenId,jdbcType=VARCHAR},
               created_by = #{record.createdBy,jdbcType=INTEGER},
               created_dt = #{record.createdDt,jdbcType=TIMESTAMP},
               last_update_by = #{record.lastUpdateBy,jdbcType=INTEGER},
               last_update_dt = #{record.lastUpdateDt,jdbcType=TIMESTAMP},
               sts = #{record.sts,jdbcType=CHAR},
               token = #{record.token,jdbcType=LONGVARBINARY},
               authentication = #{record.authentication,jdbcType=LONGVARBINARY}
          <if test="_parameter != null">
               <include refid="Update_By_Query_Where_Clause" />
          </if>
     </update>
     <update id="updateByQuery" parameterType="map">
          update auth_refresh_token
          set id = #{record.id,jdbcType=INTEGER},
               token_id = #{record.tokenId,jdbcType=VARCHAR},
               created_by = #{record.createdBy,jdbcType=INTEGER},
               created_dt = #{record.createdDt,jdbcType=TIMESTAMP},
               last_update_by = #{record.lastUpdateBy,jdbcType=INTEGER},
               last_update_dt = #{record.lastUpdateDt,jdbcType=TIMESTAMP},
               sts = #{record.sts,jdbcType=CHAR}
          <if test="_parameter != null">
               <include refid="Update_By_Query_Where_Clause" />
          </if>
     </update>
     <update id="updateByPrimaryKeySelective" parameterType="com.ygjt.gdn.ftisp.model.RefreshTokenWithBLOBs">
          update auth_refresh_token
          <set>
               <if test="tokenId != null">
                    token_id = #{tokenId,jdbcType=VARCHAR},
               </if>
               <if test="createdBy != null">
                    created_by = #{createdBy,jdbcType=INTEGER},
               </if>
               <if test="createdDt != null">
                    created_dt = #{createdDt,jdbcType=TIMESTAMP},
               </if>
               <if test="lastUpdateBy != null">
                    last_update_by = #{lastUpdateBy,jdbcType=INTEGER},
               </if>
               <if test="lastUpdateDt != null">
                    last_update_dt = #{lastUpdateDt,jdbcType=TIMESTAMP},
               </if>
               <if test="sts != null">
                    sts = #{sts,jdbcType=CHAR},
               </if>
               <if test="token != null">
                    token = #{token,jdbcType=LONGVARBINARY},
               </if>
               <if test="authentication != null">
                    authentication = #{authentication,jdbcType=LONGVARBINARY},
               </if>
          </set>
          where id = #{id,jdbcType=INTEGER}
     </update>
     <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.ygjt.gdn.ftisp.model.RefreshTokenWithBLOBs">
          update auth_refresh_token
          set token_id = #{tokenId,jdbcType=VARCHAR},
               created_by = #{createdBy,jdbcType=INTEGER},
               created_dt = #{createdDt,jdbcType=TIMESTAMP},
               last_update_by = #{lastUpdateBy,jdbcType=INTEGER},
               last_update_dt = #{lastUpdateDt,jdbcType=TIMESTAMP},
               sts = #{sts,jdbcType=CHAR},
               token = #{token,jdbcType=LONGVARBINARY},
               authentication = #{authentication,jdbcType=LONGVARBINARY}
          where id = #{id,jdbcType=INTEGER}
     </update>
     <update id="updateByPrimaryKey" parameterType="com.ygjt.gdn.ftisp.model.RefreshTokenDo">
          update auth_refresh_token
          set token_id = #{tokenId,jdbcType=VARCHAR},
               created_by = #{createdBy,jdbcType=INTEGER},
               created_dt = #{createdDt,jdbcType=TIMESTAMP},
               last_update_by = #{lastUpdateBy,jdbcType=INTEGER},
               last_update_dt = #{lastUpdateDt,jdbcType=TIMESTAMP},
               sts = #{sts,jdbcType=CHAR}
          where id = #{id,jdbcType=INTEGER}
     </update>
</mapper>